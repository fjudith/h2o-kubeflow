// @apiVersion 0.1
// @name io.ksonnet.pkg.h2oai-mojo-rest-server
// @description Small sample rest server for consuming mojo artifacts generated by Driverless AI
// @shortDescription Driverless AI Mojo Rest Server
// @param name string Name to give each of the components
// @param model_server_image string <docker repository>/<docker image>:<docker tag>
// @optionalParam namespace string default namespace
// @optionalParam memory string 8 starting memory per pod
// @optionalParam cpu string 1 starting number of cpu per pod
// @optionalParam configMapName string null name of configuration map containing Driverless AI license file to be consumed by the mojo
// @optionalParam pvcSize string 5 size in GB to allocate to persistent volume attached to this deployment, can be fairly small. Just enough to hold mojo artifacts.
// @optionalParam pvcName string null Name of pre-established Persistent Volume, if exists will try to create a claim to this persistent volume
// @optionalParam licenseLocation string /config/license.sig location of driverless ai license
// @optionalParam mojoLocation string /tmp/mojo-models/ directory where the mojo.zip file resides

local k = import 'k.libsonnet';
local mojoserving = import 'h2o-kubeflow/h2oai/h2oai-mojo-rest-server.libsonnet';

local name = import 'param://name';
local namespace = import 'param://namespace';
local memory = import 'param://memory';
local cpu = import 'param://cpu';
local pvcSize = import 'param://pvcSize';
local pvcName = import 'param://pvcName';
local configMapName = import 'param://configMapName';
local modelServerImage = import 'param://model_server_image';
local licenseLocation = import 'param://licenseLocation';
local mojoLocation = import 'param://mojoLocation';

if pvcName != "null" then std.prune(k.core.v1.list.new([
  mojoserving.parts.deployment.modelServer(name, namespace, memory, cpu, pvcName, configMapName, modelServerImage, licenseLocation, mojoLocation),
  mojoserving.parts.deployment.modelService(name, namespace),
])) else std.prune(k.core.v1.list.new([
  mojoserving.parts.deployment.modelServer(name, namespace, memory, cpu, name, configMapName, modelServerImage, licenseLocation, mojoLocation),
  mojoserving.parts.deployment.modelService(name, namespace),
  mojoserving.parts.deployment.modelPersistentVolumeClaim(name, namespace, pvcSize),
]))
